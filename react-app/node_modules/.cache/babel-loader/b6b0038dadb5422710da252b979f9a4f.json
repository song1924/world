{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\components\\\\CityForm.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { From, Button, Form, Col } from 'react-bootstrap';\nexport const AddCityForm = ({\n  show,\n  onClickReload,\n  city,\n  countryCode\n}) => {\n  const [validated, setValidated] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [mode, setMode] = useState(\"add\");\n  const [cityId, setCityId] = useState(\"\");\n  const [cityName, setCityName] = useState(\"\");\n  const [cityCountryCode, setCityCountryCode] = useState(countryCode);\n  const [cityDistrict, setCityDistrict] = useState(\"\");\n  const [cityPopulation, setCityPopulation] = useState(0);\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const formRef = useRef(null); // set variables depending on add/edit mode.\n  // if city object is passed, it means it is in edit mode.\n\n  useEffect(() => {\n    if (city) {\n      setMode(\"edit\");\n      const EDIT_CITY = `\nmutation editCity {\nupdateCity(id: ${cityId}, name: \"${cityName}\", countycode: \"${cityCountryCode}\", district: \"${cityDistrict}\", population: ${cityPopulation}) {\ncity {\nid \nname \ncountrycode \ndistrict \npopulation\n}\n}\n}\n`;\n      setQuery(EDIT_CITY);\n    } else {\n      const ADD_CITY = `\nmutation addCity {\ncreateCity(name: \"${cityName}\", countrycode: \"${cityCountryCode}\", district: \"${cityDistrict}\", population: ${cityPopulation}) {\ncity {\nid \nname \ncountrycode \ndistrict \npopulation\n}\n}\n}\n\n`;\n      setQuery(ADD_CITY);\n    }\n  }, [show]); // action for handling edit/add city form\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n    event.preventDefault(); // if form didn't pass the requirement,\n    // stop the process.\n\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true); // set query input values\n\n    setCityName(event.target.formName.value);\n    setCityDistrict(event.target.formDistrict.value);\n    setCityPopulation(event.target.formPopulation.value);\n\n    if (city) {\n      const decoded_id = window.atob(city.id);\n      const id_ls = decoded_id.split(\":\");\n      setCityId(id_ls[1]);\n      setCityCountryCode(city.countrycode);\n    } // set post request options to api\n\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query\n      })\n    }; // send post request and display the response message\n\n    fetch('/graphql', requestOptions).then(response => response.json()).then(data => {\n      console.log(data);\n      let successMsg = data.data.createCity.city.name + \" is successfully \" + mode + \"ed. \";\n      const failMsg = \"System failed to \" + mode + \" city. (\" + data.error + \")\";\n\n      if (mode == \"edit\") {\n        if (!(\"error\" in data)) {\n          successMsg.concat(\"Table will be reloaded soon.\");\n          setResponseMessage(successMsg);\n          setTimeout(function () {\n            onClickReload();\n          }, 3000);\n        } else {\n          setResponseMessage(failMsg);\n        }\n      } else {\n        if (!(\"error\" in data)) {\n          setResponseMessage(successMsg);\n          onClickReload();\n        } else {\n          setResponseMessage(failMsg);\n        }\n\n        formRef.current.reset();\n        setTimeout(function () {\n          setResponseMessage(\"\");\n        }, 3000);\n      }\n    });\n    setValidated(false);\n  }; // if only show variable is true, show the form.\n\n\n  if (show) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      noValidate: true,\n      validated: validated,\n      onSubmit: handleSubmit,\n      style: {\n        width: \"100%\"\n      },\n      ref: formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      className: \"align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      id: \"city-name-input\",\n      className: \"mb-4\",\n      type: \"text\",\n      placeholder: \"City Name\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formDistrict\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      defaultValue: \"district\",\n      id: \"city-district-input\",\n      className: \"mb-4\",\n      type: \"text\",\n      placeholder: \"District\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formPopulation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form.Control, {\n      id: \"city-population-input\",\n      className: \"mb-4\",\n      type: \"number\",\n      placeholder: \"Population\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 33\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-4\",\n      variant: \"success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 29\n      }\n    }, \"Submit\")))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, responseMessage));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/components/CityForm.jsx"],"names":["React","useState","useEffect","useRef","From","Button","Form","Col","AddCityForm","show","onClickReload","city","countryCode","validated","setValidated","query","setQuery","mode","setMode","cityId","setCityId","cityName","setCityName","cityCountryCode","setCityCountryCode","cityDistrict","setCityDistrict","cityPopulation","setCityPopulation","responseMessage","setResponseMessage","formRef","EDIT_CITY","ADD_CITY","handleSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","target","formName","value","formDistrict","formPopulation","decoded_id","window","atob","id","id_ls","split","countrycode","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","data","console","log","successMsg","createCity","name","failMsg","error","concat","setTimeout","current","reset","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { From, Button, Form, Col } from 'react-bootstrap';\r\n\r\nexport const AddCityForm = ({ show, onClickReload, city, countryCode }) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [query, setQuery] = useState(\"\");\r\n    const [mode, setMode] = useState(\"add\");\r\n    const [cityId, setCityId] = useState(\"\");\r\n    const [cityName, setCityName] = useState(\"\");\r\n    const [cityCountryCode, setCityCountryCode] = useState(countryCode); \r\n    const [cityDistrict, setCityDistrict] = useState(\"\");\r\n    const [cityPopulation, setCityPopulation] = useState(0);\r\n    const [responseMessage, setResponseMessage] = useState(\"\");\r\n    const formRef = useRef(null);\r\n\r\n    // set variables depending on add/edit mode.\r\n    // if city object is passed, it means it is in edit mode.\r\n    useEffect(\r\n        () => {\r\n            if (city) {\r\n                setMode(\"edit\");\r\n\r\n                \r\n                const EDIT_CITY = `\r\nmutation editCity {\r\nupdateCity(id: ${cityId}, name: \"${cityName}\", countycode: \"${cityCountryCode}\", district: \"${cityDistrict}\", population: ${cityPopulation}) {\r\ncity {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation\r\n}\r\n}\r\n}\r\n`;\r\n                setQuery(EDIT_CITY);\r\n            } else {\r\n                const ADD_CITY = `\r\nmutation addCity {\r\ncreateCity(name: \"${cityName}\", countrycode: \"${cityCountryCode}\", district: \"${cityDistrict}\", population: ${cityPopulation}) {\r\ncity {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation\r\n}\r\n}\r\n}\r\n\r\n`;\r\n                setQuery(ADD_CITY);\r\n            }\r\n        }, [show]);\r\n\r\n\r\n    // action for handling edit/add city form\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        event.preventDefault();\r\n\r\n        // if form didn't pass the requirement,\r\n        // stop the process.\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        // set query input values\r\n        setCityName(event.target.formName.value);\r\n        setCityDistrict(event.target.formDistrict.value);\r\n        setCityPopulation(event.target.formPopulation.value);\r\n        if (city) {\r\n            const decoded_id = window.atob(city.id);\r\n            const id_ls = decoded_id.split(\":\");\r\n            setCityId(id_ls[1]);\r\n            setCityCountryCode(city.countrycode);\r\n        } \r\n\r\n        // set post request options to api\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ query: query })\r\n        };\r\n\r\n        // send post request and display the response message\r\n        fetch('/graphql', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                let successMsg = data.data.createCity.city.name + \" is successfully \" + mode + \"ed. \";\r\n                const failMsg = \"System failed to \" + mode + \" city. (\" + data.error + \")\";\r\n\r\n                if (mode == \"edit\") {\r\n                    if (!(\"error\" in data)) {\r\n                        successMsg.concat(\"Table will be reloaded soon.\");\r\n\r\n                        setResponseMessage(successMsg);\r\n                        setTimeout(function () {\r\n                            onClickReload();\r\n                        }, 3000);\r\n                    } else {\r\n                        setResponseMessage(failMsg);\r\n                    }\r\n                } else {\r\n                    if (!(\"error\" in data)) {\r\n                        setResponseMessage(successMsg);\r\n                        onClickReload();\r\n                    } else {\r\n                        setResponseMessage(failMsg);\r\n                    }\r\n                    formRef.current.reset();\r\n                    setTimeout(function () {\r\n                        setResponseMessage(\"\");\r\n                    }, 3000);\r\n                }\r\n            });\r\n        setValidated(false);\r\n        }\r\n\r\n    // if only show variable is true, show the form.\r\n    if (show) {\r\n        return (\r\n            <div>\r\n                <Form inline noValidate validated={validated} onSubmit={handleSubmit} style={{ width: \"100%\" }} ref={formRef}>\r\n                    <Form.Row className=\"align-items-center\">\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formName\">\r\n                                <Form.Control id=\"city-name-input\" className=\"mb-4\" type=\"text\" placeholder=\"City Name\" required />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formDistrict\">\r\n                                <Form.Control defaultValue=\"district\" id=\"city-district-input\" className=\"mb-4\" type=\"text\" placeholder=\"District\" required />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formPopulation\">\r\n                                <Form.Control id=\"city-population-input\" className=\"mb-4\" type=\"number\" placeholder=\"Population\" required />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Button className=\"mb-4\" variant=\"success\" type=\"submit\">\r\n                                Submit\r\n                    </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n                <p>{responseMessage}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return <div></div>\r\n}"]},"metadata":{},"sourceType":"module"}