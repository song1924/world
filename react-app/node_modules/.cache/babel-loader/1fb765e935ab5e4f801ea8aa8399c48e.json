{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\components\\\\Cities.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Button } from 'react-bootstrap';\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport { FaPencilAlt, FaTrashAlt } from \"react-icons/fa\";\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport { AddCityForm } from './AddCityForm';\nimport ReactDOM from 'react-dom';\nexport const Cities = ({\n  country\n}) => {\n  const [cities, setCities] = useState([]);\n  const [show, setShow] = useState(false);\n  const [reloadSwitch, setReloadSwitch] = useState(false);\n  useEffect(() => {\n    const GET_CITIES = `\nquery getCities {\ncities(filters: {countrycode: \"${country.code}\"}) {\nedges {\nnode {\nid \nname \ncountrycode \ndistrict \npopulation \n}\n}\n}\n}\n\n`;\n    fetch('/graphql?query=' + GET_CITIES).then(res => res.json()).then(data => {\n      setCities(data.data.cities.edges);\n    });\n  }, [country, reloadSwitch]);\n\n  if (!country || country.length === 0) {\n    if (cities.length !== 0) {\n      setCities([]);\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 16\n      }\n    });\n  }\n\n  let city_ls = [];\n\n  for (const city of cities) {\n    city_ls.push(city.node);\n  }\n\n  const columns = [{\n    dataField: 'name',\n    text: 'City Name',\n    sort: true,\n    filter: textFilter()\n  }, {\n    dataField: 'district',\n    text: 'District',\n    sort: true,\n    filter: textFilter()\n  }, {\n    dataField: 'population',\n    text: 'Population',\n    sort: true\n  }];\n  const expandRow = {\n    renderer: row => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App-data-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"success\",\n      id: row.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FaPencilAlt, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 55\n      }\n    }), \" Edit City\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"secondary\",\n      id: row.id,\n      onClick: () => onDeleteBtnClick(row.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FaTrashAlt, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 98\n      }\n    }), \" Delete City\")), /*#__PURE__*/React.createElement(\"div\", {\n      id: row.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    })),\n    showExpandColumn: true\n  };\n\n  function onAddBtnClick() {\n    setShow(!show);\n  }\n\n  function reload() {\n    setReloadSwitch(!reloadSwitch);\n  }\n\n  function onDeleteBtnClick(id) {\n    const decoded_id = window.atob(id);\n    const id_ls = decoded_id.split(\":\");\n    const DELETE_CITY = `\nmutation deleteCity {\ndeleteCity(id: \"${id_ls[1]}\") {\nstatus \n}\n}`;\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: DELETE_CITY\n      })\n    };\n    fetch('/graphql', requestOptions).then(response => response.json()).then(data => {\n      if (data.data.deleteCity.status == \"OK\") {\n        setInterval(setResponseMsg(id), 3000);\n      }\n    });\n  }\n\n  function setResponseMsg(id) {\n    const msg = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \"The city is successfully removed. Table will be reloaded soon.\");\n    ReactDOM.render(msg, document.getElementById(id));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App-data-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, \"Cities in Country\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    className: \"App-button\",\n    onClick: () => onAddBtnClick(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, \"Add City\"), /*#__PURE__*/React.createElement(AddCityForm, {\n    show: show,\n    country: country,\n    onClick: reload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 18\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(BootstrapTable, {\n    wrapperClasses: \"table-responsive\",\n    keyField: \"id\",\n    data: city_ls,\n    columns: columns,\n    filter: filterFactory(),\n    expandRow: expandRow,\n    pagination: paginationFactory(),\n    striped: true,\n    hover: true,\n    condensed: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  })));\n};","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/components/Cities.jsx"],"names":["React","useState","useEffect","Button","BootstrapTable","FaPencilAlt","FaTrashAlt","filterFactory","textFilter","paginationFactory","AddCityForm","ReactDOM","Cities","country","cities","setCities","show","setShow","reloadSwitch","setReloadSwitch","GET_CITIES","code","fetch","then","res","json","data","edges","length","city_ls","city","push","node","columns","dataField","text","sort","filter","expandRow","renderer","row","id","onDeleteBtnClick","showExpandColumn","onAddBtnClick","reload","decoded_id","window","atob","id_ls","split","DELETE_CITY","requestOptions","method","headers","body","JSON","stringify","query","response","deleteCity","status","setInterval","setResponseMsg","msg","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { FaPencilAlt, FaTrashAlt } from \"react-icons/fa\";\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport { AddCityForm } from './AddCityForm';\r\nimport ReactDOM from 'react-dom';\r\n\r\nexport const Cities = ({ country }) => {\r\n    const [cities, setCities] = useState([]);\r\n    const [show, setShow] = useState(false);\r\n    const [reloadSwitch, setReloadSwitch] = useState(false);\r\n    \r\n    useEffect(\r\n        () => {\r\n            const GET_CITIES = `\r\nquery getCities {\r\ncities(filters: {countrycode: \"${country.code}\"}) {\r\nedges {\r\nnode {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation \r\n}\r\n}\r\n}\r\n}\r\n\r\n`;\r\n\r\n            fetch('/graphql?query=' + GET_CITIES).then(res => res.json())\r\n                .then(data => {\r\n                    setCities(data.data.cities.edges);\r\n                });\r\n        }, [country, reloadSwitch]);\r\n\r\n    if (!country || country.length === 0) {\r\n        if (cities.length !== 0) {\r\n            setCities([]);\r\n        }\r\n\r\n        return <div></div>\r\n    }\r\n\r\n    let city_ls = [];\r\n    for (const city of cities) {\r\n        city_ls.push(city.node);\r\n    }\r\n\r\n    const columns = [{\r\n        dataField: 'name',\r\n        text: 'City Name',\r\n            sort: true,\r\n            filter: textFilter()\r\n    }, {\r\n        dataField: 'district',\r\n        text: 'District',\r\n            sort: true,\r\n            filter: textFilter()\r\n    }, {\r\n        dataField: 'population',\r\n        text: 'Population',\r\n        sort: true\r\n    }];\r\n\r\n    const expandRow = {\r\n        renderer: row => (\r\n            <div>\r\n            <div className=\"App-data-buttons\">\r\n                <Button variant=\"success\" id={row.id}><FaPencilAlt /> Edit City</Button>\r\n                <Button variant=\"secondary\" id={row.id} onClick={() => onDeleteBtnClick(row.id)}><FaTrashAlt /> Delete City</Button>\r\n                </div>\r\n                <div id={row.id}></div>\r\n                </div>\r\n        ),\r\n        showExpandColumn: true\r\n    };\r\n\r\n    function onAddBtnClick() {\r\n        setShow(!show);\r\n    }\r\n\r\n    function reload() {\r\n        setReloadSwitch(!reloadSwitch);\r\n    }\r\n\r\n    function onDeleteBtnClick(id) {\r\n        const decoded_id = window.atob(id);\r\n        const id_ls = decoded_id.split(\":\");\r\n        const DELETE_CITY = `\r\nmutation deleteCity {\r\ndeleteCity(id: \"${id_ls[1]}\") {\r\nstatus \r\n}\r\n}`;\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ query: DELETE_CITY })\r\n        };\r\n\r\n        fetch('/graphql', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (data.data.deleteCity.status == \"OK\") {\r\n                    setInterval(setResponseMsg(id), 3000);\r\n                }\r\n            });\r\n    }\r\n\r\n    function setResponseMsg(id) {\r\n        const msg = (\r\n            <div>The city is successfully removed. Table will be reloaded soon.</div>\r\n        );\r\n        ReactDOM.render(msg, document.getElementById(id));\r\n    }\r\n\r\n    return (\r\n        <div className=\"App-data-wrap\">\r\n            <p>Cities in Country</p>\r\n            <div>\r\n                <Button variant=\"success\" className=\"App-button\" onClick={() => onAddBtnClick()}>Add City</Button>\r\n                {<AddCityForm show={show} country={country} onClick={reload} />}\r\n                </div>\r\n            <div className=\"App-table\">\r\n                <BootstrapTable wrapperClasses=\"table-responsive\" keyField=\"id\" data={city_ls} columns={columns} filter={filterFactory()} expandRow={expandRow} pagination={paginationFactory()} striped hover condensed />\r\n            </div>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}