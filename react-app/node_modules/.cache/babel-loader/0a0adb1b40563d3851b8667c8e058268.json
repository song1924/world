{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\components\\\\AddCityForm.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { From, Button, Form, Col } from 'react-bootstrap';\nexport const AddCityForm = ({\n  show,\n  country,\n  onClick,\n  city\n}) => {\n  const [validated, setValidated] = useState(false);\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const [formName, setFormName] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"text\",\n    placeholder: \"City Name\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 46\n    }\n  }));\n  const [formDistrict, setFormDistrict] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"text\",\n    placeholder: \"District\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 54\n    }\n  }));\n  const [formPopulation, setFormPopulation] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"number\",\n    placeholder: \"Population\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 58\n    }\n  }));\n  const formRef = useRef(null);\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n    event.preventDefault();\n\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n    const ADD_CITY = `\nmutation addCity {\ncreateCity(name: \"${event.target.formName.value}\", countrycode: \"${country.code}\", district: \"${event.target.formDistrict.value}\", population: ${event.target.formPopulation.value}) {\ncity {\nid \nname \ncountrycode \ndistrict \npopulation\n}\n}\n}\n\n`;\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: ADD_CITY\n      })\n    };\n    fetch('/graphql', requestOptions).then(response => response.json()).then(data => {\n      console.log(data);\n\n      if (data.data) {\n        setResponseMessage(data.data.createCity.city.name + \" is successfully added.\");\n        onClick();\n      } else {\n        setResponseMessage(\"System failed to add city.\");\n      }\n\n      setTimeout(function () {\n        setResponseMessage(\"\");\n      }, 3000);\n    });\n    console.log(formRef);\n    formRef.current.reset();\n    setValidated(false);\n  };\n\n  debugger;\n\n  if (show) {\n    if (city) {\n      setFormName( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"text\",\n        placeholder: \"City Name\",\n        value: city.name,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 25\n        }\n      }));\n      setFormDistrict( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"text\",\n        placeholder: \"District\",\n        value: city.district,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 29\n        }\n      }));\n      setFormPopulation( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"number\",\n        placeholder: \"Population\",\n        value: city.population,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 31\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      noValidate: true,\n      validated: validated,\n      onSubmit: handleSubmit,\n      style: {\n        width: \"100%\"\n      },\n      ref: formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      className: \"align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, formName)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formDistrict\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, formDistrict)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formPopulation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }, formPopulation)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-4\",\n      variant: \"success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, \"Submit\")))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, responseMessage));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/components/AddCityForm.jsx"],"names":["React","useState","useEffect","useRef","From","Button","Form","Col","AddCityForm","show","country","onClick","city","validated","setValidated","responseMessage","setResponseMessage","formName","setFormName","formDistrict","setFormDistrict","formPopulation","setFormPopulation","formRef","handleSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","ADD_CITY","target","value","code","requestOptions","method","headers","body","JSON","stringify","query","fetch","then","response","json","data","console","log","createCity","name","setTimeout","current","reset","district","population","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { From, Button, Form, Col } from 'react-bootstrap';\r\n\r\nexport const AddCityForm = ({ show, country, onClick, city }) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [responseMessage, setResponseMessage] = useState(\"\");\r\n    const [formName, setFormName] = useState(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"City Name\" required />);\r\n    const [formDistrict, setFormDistrict] = useState(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"District\" required />);\r\n    const [formPopulation, setFormPopulation] = useState(<Form.Control className=\"mb-4\" type=\"number\" placeholder=\"Population\" required />);\r\n    const formRef = useRef(null);\r\n\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        event.preventDefault();\r\n\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        }\r\n\r\n        setValidated(true);\r\n\r\n        const ADD_CITY = `\r\nmutation addCity {\r\ncreateCity(name: \"${event.target.formName.value}\", countrycode: \"${country.code}\", district: \"${event.target.formDistrict.value}\", population: ${event.target.formPopulation.value}) {\r\ncity {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation\r\n}\r\n}\r\n}\r\n\r\n`;\r\n\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ query: ADD_CITY })\r\n        };\r\n\r\n        fetch('/graphql', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                if (data.data) {\r\n                    setResponseMessage(data.data.createCity.city.name + \" is successfully added.\");\r\n                    onClick();\r\n                } else {\r\n                    setResponseMessage(\"System failed to add city.\");\r\n                }\r\n\r\n                setTimeout(function () {\r\n                    setResponseMessage(\"\");\r\n                }, 3000);\r\n            });\r\n        console.log(formRef);\r\n        formRef.current.reset();\r\n        setValidated(false);\r\n    };\r\n    debugger;\r\n    if (show) {\r\n        if (city) {\r\n            setFormName(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"City Name\" value={city.name} required />);\r\n            setFormDistrict(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"District\" value={city.district} required />);\r\n            setFormPopulation(<Form.Control className=\"mb-4\" type=\"number\" placeholder=\"Population\" value={city.population} required />);\r\n        }\r\n        return (\r\n            <div>\r\n                <Form inline noValidate validated={validated} onSubmit={handleSubmit} style={{ width: \"100%\" }} ref={ formRef }>\r\n                <Form.Row className=\"align-items-center\">\r\n                    <Col xs=\"auto\">\r\n                        <Form.Group controlId=\"formName\">\r\n                                {formName}\r\n                            </Form.Group>\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <Form.Group controlId=\"formDistrict\">\r\n                                {formDistrict}\r\n                            </Form.Group>\r\n                    </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formPopulation\">\r\n                                {formPopulation}\r\n                            </Form.Group>\r\n                    </Col>\r\n                    <Col xs=\"auto\">\r\n                        <Button className=\"mb-4\" variant=\"success\" type=\"submit\">\r\n                            Submit\r\n                    </Button>\r\n                    </Col>\r\n                </Form.Row>\r\n                </Form>\r\n                <p>{responseMessage}</p>\r\n                </div>\r\n        )\r\n    }\r\n\r\n    return <div></div>\r\n}"]},"metadata":{},"sourceType":"module"}