{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\components\\\\CityForm.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { From, Button, Form, Col } from 'react-bootstrap';\nexport const AddCityForm = ({\n  show,\n  onClickReload,\n  city,\n  countryCode\n}) => {\n  const [validated, setValidated] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [mode, setMode] = useState(\"add\");\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const [formName, setFormName] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"text\",\n    placeholder: \"City Name\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 46\n    }\n  }));\n  const [formDistrict, setFormDistrict] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"text\",\n    placeholder: \"District\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 54\n    }\n  }));\n  const [formPopulation, setFormPopulation] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"number\",\n    placeholder: \"Population\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 58\n    }\n  }));\n  const formRef = useRef(null); // set variables depending on add/edit mode.\n  // if city object is passed, it means it is in edit mode.\n\n  useEffect(() => {\n    if (city) {\n      setFormName( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"text\",\n        placeholder: \"City Name\",\n        value: city.name,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 29\n        }\n      }));\n      setFormDistrict( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"text\",\n        placeholder: \"District\",\n        value: city.district,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 33\n        }\n      }));\n      setFormPopulation( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"number\",\n        placeholder: \"Population\",\n        value: city.population,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 35\n        }\n      }));\n      setMode(\"edit\");\n      const decoded_id = window.atob(city.id);\n      const id_ls = decoded_id.split(\":\");\n      const EDIT_CITY = `\nmutation editCity {\nupdateCity(id: ${id_ls[1]}, name: \"${event.target.formName.value}\", countycode: \"${city.countrycode}\", district: \"${event.target.formDistrict.value}\", population: ${event.target.formPopulation.value}) {\ncity {\nid \nname \ncountrycode \ndistrict \npopulation\n}\n}\n}\n`;\n      setQuery(EDIT_CITY);\n    } else {\n      const ADD_CITY = `\nmutation addCity {\ncreateCity(name: \"${event.target.formName.value}\", countrycode: \"${countryCode}\", district: \"${event.target.formDistrict.value}\", population: ${event.target.formPopulation.value}) {\ncity {\nid \nname \ncountrycode \ndistrict \npopulation\n}\n}\n}\n\n`;\n      setQuery(ADD_CITY);\n    }\n  }, [show]); // action for handling edit/add city form\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n    event.preventDefault(); // if form didn't pass the requirement,\n    // stop the process.\n\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true); // set post request options to api\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query\n      })\n    }; // send post request and display the response message\n\n    fetch('/graphql', requestOptions).then(response => response.json()).then(data => {\n      console.log(data);\n      let successMsg = data.data.createCity.city.name + \" is successfully \" + mode + \"ed. \";\n      const failMsg = \"System failed to \" + mode + \" city. (\" + data.error + \")\";\n\n      if (mode == \"edit\") {\n        if (!(\"error\" in data)) {\n          successMsg.concat(\"Table will be reloaded soon.\");\n          setResponseMessage(successMsg);\n          setTimeout(function () {\n            onClickReload();\n          }, 3000);\n        } else {\n          setResponseMessage(failMsg);\n        }\n      } else {\n        if (!(\"error\" in data)) {\n          setResponseMessage(successMsg);\n          onClickReload();\n        } else {\n          setResponseMessage(failMsg);\n        }\n\n        formRef.current.reset();\n        setTimeout(function () {\n          setResponseMessage(\"\");\n        }, 3000);\n      }\n    });\n    setValidated(false);\n  }; // if only show variable is true, show the form.\n\n\n  if (show) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      noValidate: true,\n      validated: validated,\n      onSubmit: handleSubmit,\n      style: {\n        width: \"100%\"\n      },\n      ref: formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      className: \"align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }\n    }, formName)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formDistrict\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 29\n      }\n    }, formDistrict)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formPopulation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    }, formPopulation)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-4\",\n      variant: \"success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 29\n      }\n    }, \"Submit\")))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }\n    }, responseMessage));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/components/CityForm.jsx"],"names":["React","useState","useEffect","useRef","From","Button","Form","Col","AddCityForm","show","onClickReload","city","countryCode","validated","setValidated","query","setQuery","mode","setMode","responseMessage","setResponseMessage","formName","setFormName","formDistrict","setFormDistrict","formPopulation","setFormPopulation","formRef","name","district","population","decoded_id","window","atob","id","id_ls","split","EDIT_CITY","event","target","value","countrycode","ADD_CITY","handleSubmit","form","currentTarget","preventDefault","checkValidity","stopPropagation","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","data","console","log","successMsg","createCity","failMsg","error","concat","setTimeout","current","reset","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { From, Button, Form, Col } from 'react-bootstrap';\r\n\r\nexport const AddCityForm = ({ show, onClickReload, city, countryCode }) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [query, setQuery] = useState(\"\");\r\n    const [mode, setMode] = useState(\"add\");\r\n    const [responseMessage, setResponseMessage] = useState(\"\");\r\n    const [formName, setFormName] = useState(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"City Name\" required />);\r\n    const [formDistrict, setFormDistrict] = useState(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"District\" required />);\r\n    const [formPopulation, setFormPopulation] = useState(<Form.Control className=\"mb-4\" type=\"number\" placeholder=\"Population\" required />);\r\n    const formRef = useRef(null);\r\n\r\n    // set variables depending on add/edit mode.\r\n    // if city object is passed, it means it is in edit mode.\r\n    useEffect(\r\n        () => {\r\n            if (city) {\r\n                setFormName(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"City Name\" value={city.name} required />);\r\n                setFormDistrict(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"District\" value={city.district} required />);\r\n                setFormPopulation(<Form.Control className=\"mb-4\" type=\"number\" placeholder=\"Population\" value={city.population} required />);\r\n                setMode(\"edit\");\r\n\r\n                const decoded_id = window.atob(city.id);\r\n                const id_ls = decoded_id.split(\":\");\r\n                const EDIT_CITY = `\r\nmutation editCity {\r\nupdateCity(id: ${id_ls[1]}, name: \"${event.target.formName.value}\", countycode: \"${city.countrycode}\", district: \"${event.target.formDistrict.value}\", population: ${event.target.formPopulation.value}) {\r\ncity {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation\r\n}\r\n}\r\n}\r\n`;\r\n                setQuery(EDIT_CITY);\r\n            } else {\r\n                const ADD_CITY = `\r\nmutation addCity {\r\ncreateCity(name: \"${event.target.formName.value}\", countrycode: \"${countryCode}\", district: \"${event.target.formDistrict.value}\", population: ${event.target.formPopulation.value}) {\r\ncity {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation\r\n}\r\n}\r\n}\r\n\r\n`;\r\n                setQuery(ADD_CITY);\r\n            }\r\n        }, [show]);\r\n\r\n\r\n    // action for handling edit/add city form\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        event.preventDefault();\r\n\r\n        // if form didn't pass the requirement,\r\n        // stop the process.\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n\r\n        // set post request options to api\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ query: query })\r\n        };\r\n\r\n        // send post request and display the response message\r\n        fetch('/graphql', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                let successMsg = data.data.createCity.city.name + \" is successfully \" + mode + \"ed. \";\r\n                const failMsg = \"System failed to \" + mode + \" city. (\" + data.error + \")\";\r\n\r\n                if (mode == \"edit\") {\r\n                    if (!(\"error\" in data)) {\r\n                        successMsg.concat(\"Table will be reloaded soon.\");\r\n\r\n                        setResponseMessage(successMsg);\r\n                        setTimeout(function () {\r\n                            onClickReload();\r\n                        }, 3000);\r\n                    } else {\r\n                        setResponseMessage(failMsg);\r\n                    }\r\n                } else {\r\n                    if (!(\"error\" in data)) {\r\n                        setResponseMessage(successMsg);\r\n                        onClickReload();\r\n                    } else {\r\n                        setResponseMessage(failMsg);\r\n                    }\r\n                    formRef.current.reset();\r\n                    setTimeout(function () {\r\n                        setResponseMessage(\"\");\r\n                    }, 3000);\r\n                }\r\n            });\r\n        setValidated(false);\r\n        }\r\n\r\n    // if only show variable is true, show the form.\r\n    if (show) {\r\n        return (\r\n            <div>\r\n                <Form inline noValidate validated={validated} onSubmit={handleSubmit} style={{ width: \"100%\" }} ref={formRef}>\r\n                    <Form.Row className=\"align-items-center\">\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formName\">\r\n                                {formName}\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formDistrict\">\r\n                                {formDistrict}\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formPopulation\">\r\n                                {formPopulation}\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Button className=\"mb-4\" variant=\"success\" type=\"submit\">\r\n                                Submit\r\n                    </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n                <p>{responseMessage}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return <div></div>\r\n}"]},"metadata":{},"sourceType":"module"}