{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\components\\\\Countries.jsx\";\nimport React, { useState } from 'react';\nimport { Dropdown } from 'react-bootstrap';\nexport const Countries = ({\n  continent,\n  region,\n  onClick\n}) => {\n  const [countries, setCountries] = useState([]);\n  let ddl = \"\";\n  const GET_COUNTRIES = `\nquery getCountries {\ncountries(filters: {continent: \"${continent}\", region: \"${region}\"}) {\nedges {\nnode {\ncode \nname \ncontinent \nregion \nsurfacearea \nindepyear \npopulation \nlifeexpectancy \ngnp \ngnpold \nlocalname \ngovernmentform \nheadofstate \ncapital \ncode2\n}\n}\n}\n}\n`;\n\n  if (continent && region) {\n    fetch('/graphql?query=' + GET_COUNTRIES).then(res => res.json()).then(data => {\n      setCountries(data.data.countries.edges);\n    });\n    ddl = countries.map(country => /*#__PURE__*/React.createElement(Dropdown.Item, {\n      key: country.node.code,\n      onClick: () => onClick(country.node),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, country.node.name));\n  }\n\n  return /*#__PURE__*/React.createElement(Dropdown, {\n    className: \"App-filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"country-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Country\"), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, ddl));\n};","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/components/Countries.jsx"],"names":["React","useState","Dropdown","Countries","continent","region","onClick","countries","setCountries","ddl","GET_COUNTRIES","fetch","then","res","json","data","edges","map","country","node","code","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAGA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,MAAb;AAAqBC,EAAAA;AAArB,CAAD,KAAoC;AACzD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,MAAIQ,GAAG,GAAG,EAAV;AACA,QAAMC,aAAa,GAAI;;kCAEON,SAAU,eAAcC,MAAO;;;;;;;;;;;;;;;;;;;;;;CAF7D;;AA0BA,MAAID,SAAS,IAAIC,MAAjB,EAAyB;AACrBM,IAAAA,KAAK,CAAC,oBAAoBD,aAArB,CAAL,CAAyCE,IAAzC,CAA8CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAArD,EACKF,IADL,CACUG,IAAI,IAAI;AACVP,MAAAA,YAAY,CAACO,IAAI,CAACA,IAAL,CAAUR,SAAV,CAAoBS,KAArB,CAAZ;AACH,KAHL;AAKAP,IAAAA,GAAG,GAAIF,SAAS,CAACU,GAAV,CAAcC,OAAO,iBACxB,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,GAAG,EAAEA,OAAO,CAACC,IAAR,CAAaC,IAAjC;AAAuC,MAAA,OAAO,EAAE,MAAMd,OAAO,CAACY,OAAO,CAACC,IAAT,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,OAAO,CAACC,IAAR,CAAaE,IADlB,CADG,CAAP;AAMH;;AACD,sBACI,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,SAAzB;AAAmC,IAAA,EAAE,EAAC,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAII,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKZ,GADL,CAJJ,CADJ;AAUH,CApDM","sourcesContent":["import React, { useState } from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\n\r\nexport const Countries = ({ continent, region, onClick }) => {\r\n    const [countries, setCountries] = useState([]);\r\n    let ddl = \"\";\r\n    const GET_COUNTRIES = `\r\nquery getCountries {\r\ncountries(filters: {continent: \"${continent}\", region: \"${region}\"}) {\r\nedges {\r\nnode {\r\ncode \r\nname \r\ncontinent \r\nregion \r\nsurfacearea \r\nindepyear \r\npopulation \r\nlifeexpectancy \r\ngnp \r\ngnpold \r\nlocalname \r\ngovernmentform \r\nheadofstate \r\ncapital \r\ncode2\r\n}\r\n}\r\n}\r\n}\r\n`;\r\n\r\n    if (continent && region) {\r\n        fetch('/graphql?query=' + GET_COUNTRIES).then(res => res.json())\r\n            .then(data => {\r\n                setCountries(data.data.countries.edges);\r\n            });\r\n\r\n        ddl = (countries.map(country =>\r\n            <Dropdown.Item key={country.node.code} onClick={() => onClick(country.node)}>\r\n                {country.node.name}\r\n            </Dropdown.Item>\r\n        )\r\n        );\r\n    }\r\n    return (\r\n        <Dropdown className=\"App-filter\">\r\n            <Dropdown.Toggle variant=\"success\" id=\"country-dropdown\">\r\n                Country\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                {ddl}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}