{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Continents } from './components/Continents';\nimport { Regions } from './components/Regions';\nimport { Countries } from './components/Countries';\nimport { Accordion, Card, Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nfunction App() {\n  const [continents, setContinents] = useState([]);\n  const [continent, setContinent] = useState([]);\n  const [regions, setRegions] = useState([]);\n  const [region, setRegion] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [city, setCity] = useState([]);\n  const GET_COUNTRIES = `\nquery getCountries {\ncountries(filters: {continent: ${continent}, region: ${region}}) {\nedges {\nnode {\ncode \nname \ncontinent \nregion \nsurfacearea \nindepyear \npopulation \nlifeexpectancy \ngnp \ngnpold \nlocalname \ngovernmentform \nheadofstate \ncapital \ncode2\n}\n}\n}\n}\n`;\n  const GET_CITIES = `\nquery getCities {\ncities(filters: {countrycode: \"USA\"}) {\nedges {\nnode {\nid \nname \ncountrycode \ndistrict \npopulation \n}\n}\n}\n}\n\n`;\n  useEffect(() => {\n    fetch('/continents').then(res => res.json()).then(data => {\n      setContinents(data.continents);\n    }); //fetch('/graphql?query=' + GET_COUNTRIES).then(res => res.json())\n    //    .then(data => {\n    //        for (const cont of continents) {\n    //            fetch('/regions/' + continent).then(res => res.json()).then(data => {\n    //                cont_reg.cont = data.regions;\n    //                console.log(cont);\n    //            });\n    //        }\n    //        setCountries(data.countries);\n    //    });\n    //fetch('/graphql?query=' + GET_CITIES).then(res => res.json())\n    //    .then(data => {\n    //        setCities(data.cities);\n    //    });\n  }, []);\n\n  function onContinentClick(cont) {\n    if (!continents.includes(cont)) {\n      continents.push(cont);\n    }\n  }\n\n  function onToggleRegions() {}\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  }, \"World Database\"), /*#__PURE__*/React.createElement(Accordion, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n    as: Card.Header,\n    variant: \"link\",\n    eventKey: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, \"Continent\"), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n    eventKey: \"0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Continents, {\n    continents: continents,\n    onClick: onContinentClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 33\n    }\n  })))))));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/App.js"],"names":["React","useState","useEffect","Continents","Regions","Countries","Accordion","Card","Button","App","continents","setContinents","continent","setContinent","regions","setRegions","region","setRegion","countries","setCountries","country","setCountry","cities","setCities","city","setCity","GET_COUNTRIES","GET_CITIES","fetch","then","res","json","data","onContinentClick","cont","includes","push","onToggleRegions","Header"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Continents } from './components/Continents';\r\nimport { Regions } from './components/Regions';\r\nimport { Countries } from './components/Countries';\r\nimport { Accordion, Card, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nfunction App() {\r\n    const [continents, setContinents, ] = useState([]);\r\n    const [continent, setContinent] = useState([]);\r\n    const [regions, setRegions] = useState([]);\r\n    const [region, setRegion] = useState([]);\r\n    const [countries, setCountries] = useState([]);\r\n    const [country, setCountry] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [city, setCity] = useState([]);\r\n\r\n    const GET_COUNTRIES = `\r\nquery getCountries {\r\ncountries(filters: {continent: ${continent}, region: ${region}}) {\r\nedges {\r\nnode {\r\ncode \r\nname \r\ncontinent \r\nregion \r\nsurfacearea \r\nindepyear \r\npopulation \r\nlifeexpectancy \r\ngnp \r\ngnpold \r\nlocalname \r\ngovernmentform \r\nheadofstate \r\ncapital \r\ncode2\r\n}\r\n}\r\n}\r\n}\r\n`;\r\n\r\n    const GET_CITIES = `\r\nquery getCities {\r\ncities(filters: {countrycode: \"USA\"}) {\r\nedges {\r\nnode {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation \r\n}\r\n}\r\n}\r\n}\r\n\r\n`;\r\n    useEffect(() => {\r\n        fetch('/continents').then(res => res.json()).then(data => {\r\n            setContinents(data.continents);\r\n        });\r\n\r\n        //fetch('/graphql?query=' + GET_COUNTRIES).then(res => res.json())\r\n        //    .then(data => {\r\n        //        for (const cont of continents) {\r\n        //            fetch('/regions/' + continent).then(res => res.json()).then(data => {\r\n        //                cont_reg.cont = data.regions;\r\n        //                console.log(cont);\r\n        //            });\r\n        //        }\r\n        //        setCountries(data.countries);\r\n        //    });\r\n\r\n        \r\n        //fetch('/graphql?query=' + GET_CITIES).then(res => res.json())\r\n        //    .then(data => {\r\n        //        setCities(data.cities);\r\n        //    });\r\n    }, []);\r\n\r\n    function onContinentClick(cont) {\r\n        if (!continents.includes(cont)) {\r\n            continents.push(cont);\r\n        }\r\n    }\r\n\r\n    function onToggleRegions() {\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App App-header\">\r\n            <h1>World Database</h1>\r\n            <Accordion>\r\n                <Card>\r\n                    <Card.Header>\r\n                        <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"0\">\r\n                            Continent\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body>\r\n                                <Continents continents={continents} onClick={onContinentClick}/>\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card.Header>\r\n                </Card>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}