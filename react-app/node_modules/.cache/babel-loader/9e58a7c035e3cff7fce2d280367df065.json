{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\components\\\\Countries.jsx\";\nimport React, { useState } from 'react';\nimport { Dropdown } from 'react-bootstrap';\nexport const Countries = ({\n  continent,\n  region,\n  onClick\n}) => {\n  const [countries, setCountries] = useState([]);\n  let ddl = \"\";\n  const GET_COUNTRIES = `\nquery getCountries {\ncountries(filters: {continent: \"${continent}\", region: \"${region}\"}) {\nedges {\nnode {\ncode \nname \ncontinent \nregion \nsurfacearea \nindepyear \npopulation \nlifeexpectancy \ngnp \ngnpold \nlocalname \ngovernmentform \nheadofstate \ncapital \ncode2\n}\n}\n}\n}\n`;\n\n  if (continent && region && continent.length > 0 && region.length > 0) {\n    if (countries.length === 0) {\n      fetch('/graphql?query=' + GET_COUNTRIES).then(res => res.json()).then(data => {\n        setCountries(data.data.countries.edges);\n      });\n    }\n\n    ddl = countries.map(country => /*#__PURE__*/React.createElement(Dropdown.Item, {\n      key: country.node.code,\n      onClick: () => onClick(country.node),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }\n    }, country.node.name));\n  } else if ((!continent || !region || continent.length === 0 || region.length === 0) && countries.length !== 0) {\n    setCountries([]);\n  }\n\n  return /*#__PURE__*/React.createElement(Dropdown, {\n    className: \"App-filter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n    variant: \"success\",\n    id: \"country-dropdown\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Country\"), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, ddl));\n};","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/components/Countries.jsx"],"names":["React","useState","Dropdown","Countries","continent","region","onClick","countries","setCountries","ddl","GET_COUNTRIES","length","fetch","then","res","json","data","edges","map","country","node","code","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AAGA,OAAO,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,MAAb;AAAqBC,EAAAA;AAArB,CAAD,KAAoC;AACzD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,EAAD,CAA1C;AACA,MAAIQ,GAAG,GAAG,EAAV;AACA,QAAMC,aAAa,GAAI;;kCAEON,SAAU,eAAcC,MAAO;;;;;;;;;;;;;;;;;;;;;;CAF7D;;AA0BA,MAAID,SAAS,IAAIC,MAAb,IAAuBD,SAAS,CAACO,MAAV,GAAmB,CAA1C,IAA+CN,MAAM,CAACM,MAAP,GAAgB,CAAnE,EAAsE;AAClE,QAAIJ,SAAS,CAACI,MAAV,KAAqB,CAAzB,EAA4B;AACxBC,MAAAA,KAAK,CAAC,oBAAoBF,aAArB,CAAL,CAAyCG,IAAzC,CAA8CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAArD,EACKF,IADL,CACUG,IAAI,IAAI;AACVR,QAAAA,YAAY,CAACQ,IAAI,CAACA,IAAL,CAAUT,SAAV,CAAoBU,KAArB,CAAZ;AACH,OAHL;AAIH;;AAEDR,IAAAA,GAAG,GAAIF,SAAS,CAACW,GAAV,CAAcC,OAAO,iBACxB,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,GAAG,EAAEA,OAAO,CAACC,IAAR,CAAaC,IAAjC;AAAuC,MAAA,OAAO,EAAE,MAAMf,OAAO,CAACa,OAAO,CAACC,IAAT,CAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,OAAO,CAACC,IAAR,CAAaE,IADlB,CADG,CAAP;AAMH,GAdD,MAcO,IAAI,CAAC,CAAClB,SAAD,IAAc,CAACC,MAAf,IAAyBD,SAAS,CAACO,MAAV,KAAqB,CAA9C,IAAmDN,MAAM,CAACM,MAAP,KAAkB,CAAtE,KAA4EJ,SAAS,CAACI,MAAV,KAAqB,CAArG,EAAwG;AAC3GH,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACH;;AAED,sBACI,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD,CAAU,MAAV;AAAiB,IAAA,OAAO,EAAC,SAAzB;AAAmC,IAAA,EAAE,EAAC,kBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,eAII,oBAAC,QAAD,CAAU,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,GADL,CAJJ,CADJ;AAUH,CAzDM","sourcesContent":["import React, { useState } from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\n\r\nexport const Countries = ({ continent, region, onClick }) => {\r\n    const [countries, setCountries] = useState([]);\r\n    let ddl = \"\";\r\n    const GET_COUNTRIES = `\r\nquery getCountries {\r\ncountries(filters: {continent: \"${continent}\", region: \"${region}\"}) {\r\nedges {\r\nnode {\r\ncode \r\nname \r\ncontinent \r\nregion \r\nsurfacearea \r\nindepyear \r\npopulation \r\nlifeexpectancy \r\ngnp \r\ngnpold \r\nlocalname \r\ngovernmentform \r\nheadofstate \r\ncapital \r\ncode2\r\n}\r\n}\r\n}\r\n}\r\n`;\r\n\r\n    if (continent && region && continent.length > 0 && region.length > 0) {\r\n        if (countries.length === 0) {\r\n            fetch('/graphql?query=' + GET_COUNTRIES).then(res => res.json())\r\n                .then(data => {\r\n                    setCountries(data.data.countries.edges);\r\n                });\r\n        }\r\n\r\n        ddl = (countries.map(country =>\r\n            <Dropdown.Item key={country.node.code} onClick={() => onClick(country.node)}>\r\n                {country.node.name}\r\n            </Dropdown.Item>\r\n        )\r\n        );\r\n    } else if ((!continent || !region || continent.length === 0 || region.length === 0) && countries.length !== 0) {\r\n        setCountries([]);\r\n    }\r\n\r\n    return (\r\n        <Dropdown className=\"App-filter\">\r\n            <Dropdown.Toggle variant=\"success\" id=\"country-dropdown\">\r\n                Country\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                {ddl}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}