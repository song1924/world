{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Continents } from './components/Continents';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Regions } from './components/Regions';\nimport { Countries } from './components/Countries';\n\nfunction App() {\n  const [continents, setContinents] = useState([]);\n  const [continent, setContinent] = useState([]);\n  const [regions, setRegions] = useState([]);\n  const [region, setRegion] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState([]);\n  const [languages, setLanguages] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [sep1, setSep1] = useState(\"\");\n  const [sep2, setSep2] = useState(\"\");\n  useEffect(() => {\n    fetch('/continents').then(res => res.json()).then(data => {\n      setContinents(data.continents);\n    });\n  }, []);\n\n  function onContinentClick(cont) {\n    setContinent(cont);\n    fetch('/regions/' + cont).then(res => res.json()).then(data => {\n      setRegions(data.regions);\n    });\n    setSep1(\">\");\n  }\n\n  function onRegionClick(reg) {\n    setRegion(reg);\n    const GET_COUNTRIES = `\nquery getCountries {\ncountries(filters: {continent: \"${continent}\", region: \"${reg}\"}) {\nedges {\nnode {\ncode \nname \ncontinent \nregion \nsurfacearea \nindepyear \npopulation \nlifeexpectancy \ngnp \ngnpold \nlocalname \ngovernmentform \nheadofstate \ncapital \ncode2\n}\n}\n}\n}\n`;\n    fetch('/graphql?query=' + GET_COUNTRIES).then(res => res.json()).then(data => {\n      setCountries(data.data.countries.edges);\n    });\n    setSep2(\">\");\n  }\n\n  function onCountryClick(country) {\n    setCountry(country);\n    const GET_LANGUAGES = `\nquery getLangauages { \ncountry_languages(filters: {countrycode: ${country}}) { \nedges{ \nnode{ \ncountrycode \nlanguage \nisofficial \npercentage\n}\n}\n}\n}\n`;\n    const GET_CITIES = `\nquery getCities {\ncities(filters: {countrycode: ${country}}) {\nedges {\nnode {\nid \nname \ncountrycode \ndistrict \npopulation \n}\n}\n}\n}\n\n`;\n    fetch('/graphql?query=' + GET_LANGUAGES).then(res => res.json()).then(data => {\n      setLanguages(data.country_languages);\n    });\n    fetch('/graphql?query=' + GET_CITIES).then(res => res.json()).then(data => {\n      setCities(data.cities);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, \"World Database\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App-filters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Continents, {\n    continents: continents,\n    onClick: onContinentClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Regions, {\n    regions: regions,\n    onClick: onRegionClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Countries, {\n    countries: countries,\n    onClick: onCountryClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"App-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, continent, \" \", sep1, \" \", region, \" \", sep2, \" \", country));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/App.js"],"names":["React","useState","useEffect","Continents","Regions","Countries","App","continents","setContinents","continent","setContinent","regions","setRegions","region","setRegion","countries","setCountries","country","setCountry","languages","setLanguages","cities","setCities","sep1","setSep1","sep2","setSep2","fetch","then","res","json","data","onContinentClick","cont","onRegionClick","reg","GET_COUNTRIES","edges","onCountryClick","GET_LANGUAGES","GET_CITIES","country_languages"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAO,kCAAP;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,SAAT,QAA0B,wBAA1B;;AAEA,SAASC,GAAT,GAAe;AACX,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACoB,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACwB,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,EAAD,CAAhC;AAGAC,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,KAAK,CAAC,aAAD,CAAL,CAAqBC,IAArB,CAA0BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAjC,EAA6CF,IAA7C,CAAkDG,IAAI,IAAI;AACtDvB,MAAAA,aAAa,CAACuB,IAAI,CAACxB,UAAN,CAAb;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,WAASyB,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5BvB,IAAAA,YAAY,CAACuB,IAAD,CAAZ;AAEAN,IAAAA,KAAK,CAAC,cAAcM,IAAf,CAAL,CAA0BL,IAA1B,CAA+BC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAtC,EACKF,IADL,CACUG,IAAI,IAAI;AACVnB,MAAAA,UAAU,CAACmB,IAAI,CAACpB,OAAN,CAAV;AACH,KAHL;AAIAa,IAAAA,OAAO,CAAC,GAAD,CAAP;AACH;;AAED,WAASU,aAAT,CAAuBC,GAAvB,EAA4B;AACxBrB,IAAAA,SAAS,CAACqB,GAAD,CAAT;AAEA,UAAMC,aAAa,GAAI;;kCAEG3B,SAAU,eAAc0B,GAAI;;;;;;;;;;;;;;;;;;;;;;CAFtD;AA0BAR,IAAAA,KAAK,CAAC,oBAAoBS,aAArB,CAAL,CAAyCR,IAAzC,CAA8CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAArD,EACKF,IADL,CACUG,IAAI,IAAI;AACVf,MAAAA,YAAY,CAACe,IAAI,CAACA,IAAL,CAAUhB,SAAV,CAAoBsB,KAArB,CAAZ;AACH,KAHL;AAKAX,IAAAA,OAAO,CAAC,GAAD,CAAP;AACH;;AAED,WAASY,cAAT,CAAwBrB,OAAxB,EAAiC;AAC7BC,IAAAA,UAAU,CAACD,OAAD,CAAV;AAEA,UAAMsB,aAAa,GAAI;;2CAEYtB,OAAQ;;;;;;;;;;;CAF3C;AAeA,UAAMuB,UAAU,GAAI;;gCAEIvB,OAAQ;;;;;;;;;;;;;CAFhC;AAiBAU,IAAAA,KAAK,CAAC,oBAAoBY,aAArB,CAAL,CAAyCX,IAAzC,CAA8CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAArD,EACKF,IADL,CACUG,IAAI,IAAI;AACVX,MAAAA,YAAY,CAACW,IAAI,CAACU,iBAAN,CAAZ;AACH,KAHL;AAKAd,IAAAA,KAAK,CAAC,oBAAoBa,UAArB,CAAL,CAAsCZ,IAAtC,CAA2CC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAlD,EACKF,IADL,CACUG,IAAI,IAAI;AACVT,MAAAA,SAAS,CAACS,IAAI,CAACV,MAAN,CAAT;AACH,KAHL;AAIH;;AAGD,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAEd,UAAxB;AAAoC,IAAA,OAAO,EAAEyB,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAErB,OAAlB;AAA2B,IAAA,OAAO,EAAEuB,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEnB,SAAtB;AAAiC,IAAA,OAAO,EAAEuB,cAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ,eAOI;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyB7B,SAAzB,OAAqCc,IAArC,OAA4CV,MAA5C,OAAqDY,IAArD,OAA4DR,OAA5D,CAPJ,CADJ;AAWH;;AAED,eAAeX,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Continents } from './components/Continents';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Regions } from './components/Regions';\r\nimport { Countries } from './components/Countries';\r\n\r\nfunction App() {\r\n    const [continents, setContinents] = useState([]);\r\n    const [continent, setContinent] = useState([]);\r\n    const [regions, setRegions] = useState([]);\r\n    const [region, setRegion] = useState([]);\r\n    const [countries, setCountries] = useState([]);\r\n    const [country, setCountry] = useState([]);\r\n    const [languages, setLanguages] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [sep1, setSep1] = useState(\"\");\r\n    const [sep2, setSep2] = useState(\"\");\r\n\r\n    \r\n    useEffect(() => {\r\n        fetch('/continents').then(res => res.json()).then(data => {\r\n            setContinents(data.continents);\r\n        });\r\n    }, []);\r\n\r\n    function onContinentClick(cont) {\r\n        setContinent(cont);\r\n\r\n        fetch('/regions/' + cont).then(res => res.json())\r\n            .then(data => {\r\n                setRegions(data.regions);\r\n            })\r\n        setSep1(\">\");\r\n    }\r\n\r\n    function onRegionClick(reg) {\r\n        setRegion(reg);\r\n\r\n        const GET_COUNTRIES = `\r\nquery getCountries {\r\ncountries(filters: {continent: \"${continent}\", region: \"${reg}\"}) {\r\nedges {\r\nnode {\r\ncode \r\nname \r\ncontinent \r\nregion \r\nsurfacearea \r\nindepyear \r\npopulation \r\nlifeexpectancy \r\ngnp \r\ngnpold \r\nlocalname \r\ngovernmentform \r\nheadofstate \r\ncapital \r\ncode2\r\n}\r\n}\r\n}\r\n}\r\n`;\r\n\r\n        fetch('/graphql?query=' + GET_COUNTRIES).then(res => res.json())\r\n            .then(data => {\r\n                setCountries(data.data.countries.edges);\r\n            });\r\n\r\n        setSep2(\">\");\r\n    }\r\n\r\n    function onCountryClick(country) {\r\n        setCountry(country);\r\n\r\n        const GET_LANGUAGES = `\r\nquery getLangauages { \r\ncountry_languages(filters: {countrycode: ${country}}) { \r\nedges{ \r\nnode{ \r\ncountrycode \r\nlanguage \r\nisofficial \r\npercentage\r\n}\r\n}\r\n}\r\n}\r\n`;\r\n\r\n        const GET_CITIES = `\r\nquery getCities {\r\ncities(filters: {countrycode: ${country}}) {\r\nedges {\r\nnode {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation \r\n}\r\n}\r\n}\r\n}\r\n\r\n`;\r\n\r\n        fetch('/graphql?query=' + GET_LANGUAGES).then(res => res.json())\r\n            .then(data => {\r\n                setLanguages(data.country_languages);\r\n            });\r\n\r\n        fetch('/graphql?query=' + GET_CITIES).then(res => res.json())\r\n            .then(data => {\r\n                setCities(data.cities);\r\n            });\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"App App-header\">\r\n            <h1>World Database</h1>\r\n            <div className=\"App-filters\">\r\n                <Continents continents={continents} onClick={onContinentClick} />\r\n                <Regions regions={regions} onClick={onRegionClick} />\r\n                <Countries countries={countries} onClick={onCountryClick} />\r\n                </div>\r\n            <p className=\"App-data\">{continent} {sep1} {region} {sep2} {country}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}