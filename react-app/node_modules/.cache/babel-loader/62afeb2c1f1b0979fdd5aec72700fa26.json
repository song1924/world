{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Julia Park\\\\source\\\\repos\\\\world\\\\react-app\\\\src\\\\components\\\\CityForm.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { From, Button, Form, Col } from 'react-bootstrap';\nexport const AddCityForm = ({\n  show,\n  onClickReload,\n  city,\n  countryCode\n}) => {\n  const [validated, setValidated] = useState(false);\n  const [mode, setMode] = useState(\"add\");\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  const [formName, setFormName] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"text\",\n    placeholder: \"City Name\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 46\n    }\n  }));\n  const [formDistrict, setFormDistrict] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"text\",\n    placeholder: \"District\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 54\n    }\n  }));\n  const [formPopulation, setFormPopulation] = useState( /*#__PURE__*/React.createElement(Form.Control, {\n    className: \"mb-4\",\n    type: \"number\",\n    placeholder: \"Population\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 58\n    }\n  }));\n  const formRef = useRef(null); // set variables depending on add/edit mode.\n  // if city object is passed, it means it is in edit mode.\n\n  useEffect(() => {\n    if (city) {\n      setFormName( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"text\",\n        placeholder: \"City Name\",\n        defaultValue: city.name,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 29\n        }\n      }));\n      setFormDistrict( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"text\",\n        placeholder: \"District\",\n        defaultValue: city.district,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 33\n        }\n      }));\n      setFormPopulation( /*#__PURE__*/React.createElement(Form.Control, {\n        className: \"mb-4\",\n        type: \"number\",\n        placeholder: \"Population\",\n        defaultValue: city.population,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 35\n        }\n      }));\n      setMode(\"edit\");\n    }\n  }, [show]); // action for handling edit/add city form\n\n  const handleSubmit = event => {\n    const form = event.currentTarget;\n    let query = \"\";\n    let cityName = event.target.formName.value;\n    let cityDistrict = event.target.formDistrict.value;\n    let cityPopulation = event.target.formPopulation.value;\n    event.preventDefault(); // if form didn't pass the requirement, stop the process.\n\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true); // set query input values\n\n    if (city) {\n      const decoded_id = window.atob(city.id);\n      const id_ls = decoded_id.split(\":\");\n      query = `\nmutation editCity {\nupdateCity(id: ${id_ls[1]}, name: \"${cityName}\", countrycode: \"${city.countrycode}\", district: \"${cityDistrict}\", population: ${cityPopulation}) {\ncity {\nid \nname \ncountrycode \ndistrict \npopulation\n}\n}\n}\n`;\n    } else {\n      query = `\nmutation addCity {\ncreateCity(name: \"${cityName}\", countrycode: \"${countryCode}\", district: \"${cityDistrict}\", population: ${cityPopulation}) {\ncity {\nid \nname \ncountrycode \ndistrict \npopulation\n}\n}\n}\n\n`;\n    } // set post request options to api\n\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query\n      })\n    }; // send post request and display the response message\n\n    fetch('/graphql', requestOptions).then(response => response.json()).then(data => {\n      const failMsg = \"System failed to \" + mode + \" city. (\" + data.errors + \")\";\n\n      if (mode == \"edit\") {\n        if (!(\"errors\" in data)) {\n          onClickReload();\n        } else {\n          setResponseMessage(failMsg);\n        }\n      } else {\n        if (!(\"errors\" in data)) {\n          onClickReload();\n        } else {\n          setResponseMessage(failMsg);\n        }\n\n        formRef.current.reset();\n        setTimeout(function () {\n          setResponseMessage(\"\");\n        }, 3000);\n      }\n    });\n    setValidated(false);\n  }; // if only show variable is true, show the form.\n\n\n  if (show) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      inline: true,\n      noValidate: true,\n      validated: validated,\n      onSubmit: handleSubmit,\n      style: {\n        width: \"100%\"\n      },\n      ref: formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Form.Row, {\n      className: \"align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 29\n      }\n    }, formName)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formDistrict\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 29\n      }\n    }, formDistrict)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form.Group, {\n      controlId: \"formPopulation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 29\n      }\n    }, formPopulation)), /*#__PURE__*/React.createElement(Col, {\n      xs: \"auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"mb-4\",\n      variant: \"success\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 29\n      }\n    }, \"Submit\")))), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, responseMessage));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Julia Park/source/repos/world/react-app/src/components/CityForm.jsx"],"names":["React","useState","useEffect","useRef","From","Button","Form","Col","AddCityForm","show","onClickReload","city","countryCode","validated","setValidated","mode","setMode","responseMessage","setResponseMessage","formName","setFormName","formDistrict","setFormDistrict","formPopulation","setFormPopulation","formRef","name","district","population","handleSubmit","event","form","currentTarget","query","cityName","target","value","cityDistrict","cityPopulation","preventDefault","checkValidity","stopPropagation","decoded_id","window","atob","id","id_ls","split","countrycode","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","data","failMsg","errors","current","reset","setTimeout","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { From, Button, Form, Col } from 'react-bootstrap';\r\n\r\nexport const AddCityForm = ({ show, onClickReload, city, countryCode }) => {\r\n    const [validated, setValidated] = useState(false);\r\n    const [mode, setMode] = useState(\"add\");\r\n    const [responseMessage, setResponseMessage] = useState(\"\");\r\n    const [formName, setFormName] = useState(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"City Name\" required />);\r\n    const [formDistrict, setFormDistrict] = useState(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"District\" required />);\r\n    const [formPopulation, setFormPopulation] = useState(<Form.Control className=\"mb-4\" type=\"number\" placeholder=\"Population\" required />);\r\n    const formRef = useRef(null);\r\n\r\n    // set variables depending on add/edit mode.\r\n    // if city object is passed, it means it is in edit mode.\r\n    useEffect(\r\n        () => {\r\n            if (city) {\r\n                setFormName(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"City Name\" defaultValue={city.name} required />);\r\n                setFormDistrict(<Form.Control className=\"mb-4\" type=\"text\" placeholder=\"District\" defaultValue={city.district} required />);\r\n                setFormPopulation(<Form.Control className=\"mb-4\" type=\"number\" placeholder=\"Population\" defaultValue={city.population} required />);\r\n                setMode(\"edit\");\r\n            } \r\n        }, [show]);\r\n\r\n\r\n    // action for handling edit/add city form\r\n    const handleSubmit = (event) => {\r\n        const form = event.currentTarget;\r\n        let query = \"\";\r\n        let cityName = event.target.formName.value;\r\n        let cityDistrict = event.target.formDistrict.value;\r\n        let cityPopulation = event.target.formPopulation.value;\r\n        event.preventDefault();\r\n\r\n        // if form didn't pass the requirement, stop the process.\r\n        if (form.checkValidity() === false) {\r\n            event.stopPropagation();\r\n        }\r\n        setValidated(true);\r\n\r\n        // set query input values\r\n       \r\n        if (city) {\r\n            const decoded_id = window.atob(city.id);\r\n            const id_ls = decoded_id.split(\":\");\r\n\r\n            query = `\r\nmutation editCity {\r\nupdateCity(id: ${id_ls[1]}, name: \"${cityName}\", countrycode: \"${city.countrycode}\", district: \"${cityDistrict}\", population: ${cityPopulation}) {\r\ncity {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation\r\n}\r\n}\r\n}\r\n`;\r\n        } else {\r\n            query = `\r\nmutation addCity {\r\ncreateCity(name: \"${cityName}\", countrycode: \"${countryCode}\", district: \"${cityDistrict}\", population: ${cityPopulation}) {\r\ncity {\r\nid \r\nname \r\ncountrycode \r\ndistrict \r\npopulation\r\n}\r\n}\r\n}\r\n\r\n`;\r\n        }\r\n\r\n        // set post request options to api\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ query: query })\r\n        };\r\n\r\n        // send post request and display the response message\r\n        fetch('/graphql', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                const failMsg = \"System failed to \" + mode + \" city. (\" + data.errors + \")\";\r\n\r\n                if (mode == \"edit\") {\r\n                    if (!(\"errors\" in data)) {\r\n                        onClickReload();\r\n                    } else {\r\n                        setResponseMessage(failMsg);\r\n                    }\r\n                } else {\r\n                    if (!(\"errors\" in data)) {\r\n                        onClickReload();\r\n                    } else {\r\n                        setResponseMessage(failMsg);\r\n                    }\r\n                    formRef.current.reset();\r\n                    setTimeout(function () {\r\n                        setResponseMessage(\"\");\r\n                    }, 3000);\r\n                }\r\n            });\r\n        setValidated(false);\r\n        }\r\n\r\n    // if only show variable is true, show the form.\r\n    if (show) {\r\n        return (\r\n            <div>\r\n                <Form inline noValidate validated={validated} onSubmit={handleSubmit} style={{ width: \"100%\" }} ref={formRef}>\r\n                    <Form.Row className=\"align-items-center\">\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formName\">\r\n                                {formName}\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formDistrict\">\r\n                                {formDistrict}\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Form.Group controlId=\"formPopulation\">\r\n                                {formPopulation}\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs=\"auto\">\r\n                            <Button className=\"mb-4\" variant=\"success\" type=\"submit\">\r\n                                Submit\r\n                    </Button>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n                <p>{responseMessage}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return <div></div>\r\n}"]},"metadata":{},"sourceType":"module"}